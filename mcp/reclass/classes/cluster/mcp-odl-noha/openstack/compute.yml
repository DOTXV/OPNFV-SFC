##############################################################################
# Copyright (c) 2018 Mirantis Inc., Enea AB and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Apache License, Version 2.0
# which accompanies this distribution, and is available at
# http://www.apache.org/licenses/LICENSE-2.0
##############################################################################
---
classes:
  - service.neutron.compute.single
  - service.neutron.compute.opendaylight.single
  - cluster.mcp-common-noha.openstack_compute
  - cluster.mcp-odl-noha
parameters:
  nova:
    compute:
      vif_plugging_is_fatal: false
      vif_plugging_timeout: 60
  neutron:
    compute:
      opendaylight:
        ovsdb_server_iface: ptcp:6640:127.0.0.1
  linux:
    network:
      ovs_nowait: false
      interface:
        br-mesh:
          enabled: true
          type: bridge
          proto: static
          address: ${_param:tenant_address}
          netmask: ${_param:opnfv_net_private_mask}
          use_interfaces:
            - ens5.1000
        ens6:
          enabled: true
          mtu: ${_param:interface_mtu}
          proto: manual
          ovs_port_type: OVSPort
          type: ovs_port
          ovs_bridge: br-floating
          bridge: br-floating
        br-floating:
          enabled: true
          type: ovs_bridge
          proto: static
          address: ${_param:external_address}
          netmask: ${_param:opnfv_net_public_mask}
          use_interfaces:
            - ens6
          gateway: ${_param:opnfv_net_public_gw}
          name_servers: ['8.8.8.8', '8.8.4.4']
          noifupdown: true
    system:
      file:
        /var/tmp/odl_hostconfig.patch:
          contents: |
            420c420
            <                 if datapath_types.find(datapath_type) >= 0)
            ---
            >                 if datapath_type in datapath_types)
            460c460
            <         return subprocess.check_output(command_line).strip()  # nosec
            ---
            >         return subprocess.check_output(command_line).strip().decode()  # nosec